def registry = 'https://nguyentiennghi212952019.jfrog.io'
pipeline {
    agent {
        node {
            label 'jenkinsslave'
        }
    }
    // tools {
    //     git 'Default'  // Specify the exact path to the Git executable
    // }
    environment {
        MAVEN_HOME = "/opt/apache-maven-3.9.9"  // Path to Maven installation
        PATH = "${MAVEN_HOME}/bin:${PATH}"  // Ensure Maven is in the PATH
    }
    stages {
        stage('Install Coreutils') {
            steps {
                script {
                    // Installing coreutils on the agent
                    sh 'sudo apt-get update && sudo apt-get install -y coreutils'  // For Ubuntu/Debian-based systems
                    // Alternatively, use the appropriate package manager for other distros:
                    // sh 'sudo yum install -y coreutils'  // For RHEL/CentOS-based systems
                    // sh 'sudo dnf install -y coreutils'  // For Fedora-based systems
                }
            }
        }
        stage('Check Shell') {
            steps {
                // This will print the shell being used in the Jenkins pipeline
                sh 'echo $SHELL'
                
                // Check environment variables
                sh 'echo "MAVEN_HOME: $MAVEN_HOME"'
                sh 'echo "PATH: $PATH"'
                sh 'echo "imageName: $imageName"'
                sh 'echo "version: $version"'
            }
        }   
        stage("build") {
            steps {
                echo "----------- build started ----------"
                sh 'mvn clean deploy -Dmaven.test.skip=true'
                echo "----------- build completed ----------"
            }
        }
        stage("test") {
            steps {
                echo "----------- unit test started ----------"
                sh 'mvn surefire-report:report'
                echo "----------- unit test Completed ----------"
            }
        }

        stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'blueberry-sonar-scanner'
            }
            steps {
                withSonarQubeEnv('blueberry-sonarqube-server') { // If you have configured more than one global server connection, you can specify its name
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
                        def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage("Jar Publish") {
            steps {
                script {
                    echo '<--------------- Jar Publish Started --------------->'
                    def server = Artifactory.newServer(url: registry + "/artifactory", credentialsId: "artfiact-cred")
                    def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}"
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "jarstaging/(*)",
                                "target": "maven-remote/{1}",
                                "flat": "false",
                                "props" : "${properties}",
                                "exclusions": [ "*.sha1", "*.md5"]
                            }
                        ]
                    }"""
                    def buildInfo = server.upload(uploadSpec)
                    buildInfo.env.collect()
                    server.publishBuildInfo(buildInfo)
                    echo '<--------------- Jar Publish Ended --------------->'
                }
            }
        }

        stage("Docker Build") {
            steps {
                script {
                    echo '<--------------- Docker Build Started --------------->'
                    app = docker.build(imageName + ":" + version)
                    echo '<--------------- Docker Build Ends --------------->'
                }
            }
        }

        stage("Docker Publish") {
            steps {
                script {
                    echo '<--------------- Docker Publish Started --------------->'
                    docker.withRegistry(registry, 'artfiact-cred') {
                        app.push()
                    }
                    echo '<--------------- Docker Publish Ended --------------->'
                }
            }
        }

        stage("Deploy") {
            steps {
                script {
                    echo '<--------------- Helm Deploy Started --------------->'
                    sh 'helm install ttrend ttrend-1.0.1.tgz'
                    echo '<--------------- Helm Deploy Ends --------------->'
                }
            }
        }
    }
}