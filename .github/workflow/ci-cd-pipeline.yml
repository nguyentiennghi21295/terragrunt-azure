name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-terragrunt:
    name: Lint Terragrunt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Terragrunt
        run: |
          curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.52.0/terragrunt_linux_amd64 -o /usr/local/bin/terragrunt
          chmod +x /usr/local/bin/terragrunt
      - name: Validate Terragrunt Files
        run: |
          terragrunt run-all validate \
            --terragrunt-working-dir ${{ env.TERRAGRUNT_WORKING_DIR }} \
            --terragrunt-include-external-dependencies \
            --terragrunt-non-interactive

  terragrunt-plan:
    name: Terragrunt Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Terragrunt
        run: |
          curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.52.0/terragrunt_linux_amd64 -o /usr/local/bin/terragrunt
          chmod +x /usr/local/bin/terragrunt

      - name: Terragrunt Plan
        run: |
          terragrunt run-all plan \
            --terragrunt-working-dir ${{ env.TERRAGRUNT_WORKING_DIR }} \
            --terragrunt-include-external-dependencies \
            --terragrunt-non-interactive

  terragrunt-apply:
    name: Terragrunt Apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Terragrunt
        run: |
          curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.52.0/terragrunt_linux_amd64 -o /usr/local/bin/terragrunt
          chmod +x /usr/local/bin/terragrunt

      - name: Terragrunt Apply
        if: github.ref == 'refs/heads/main'
        run: |
          terragrunt run-all apply \
            --terragrunt-working-dir ${{ env.TERRAGRUNT_WORKING_DIR }} \
            --terragrunt-include-external-dependencies \
            --terragrunt-non-interactive

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up SonarQube Scanner
        uses: SonarSource/sonarqube-scan-action@v1.3
      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner -Dsonar.projectKey=my_project -Dsonar.host.url=${{ secrets.SONAR_URL }}

  deploy-azure:
    name: Deploy Resources to Azure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy using Terragrunt
        run: |
          terragrunt apply-all --auto-approve

  helm-deploy:
    name: Deploy Using Helm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Deploy Helm Charts
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm upgrade --install my-release bitnami/nginx

  trigger-jenkins:
    name: Trigger Jenkins Build
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Jenkins Job
        run: |
          curl -X POST "https://jenkins.example.com/job/my-job/build" \
          --user "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}"

  ansible-playbook:
    name: Run Ansible Playbook
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Ansible
        run: |
          sudo apt-get update && sudo apt-get install -y ansible
      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i inventory.yml playbook.yml

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan -out=tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  docker-build-push:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      - name: Build Docker Image
        run: |
          docker build -t my-image .
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker Image
        run: |
          docker push my-image

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    steps:
      - name: Send Notification to Slack
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"CI/CD Pipeline Status: Success"}' ${{ secrets.SLACK_WEBHOOK_URL }}
